/* REXX *************************************************************
* The task description specifies a continued fraction for pi
* that gives a reasonable approximation.
* Literature shows a better CF that yields pi with a precision of
* 200 digits.
* http://de.wikipedia.org/wiki/Kreiszahl
*                    1
* pi = 3 + ------------------------
*                      1
*          7 + --------------------
*                         1
*              15 + ---------------
*                            1
*                   1 + -----------
*
*                       292 + ...
*
* This program uses that CF and shows the first 50 digits
* PI =3.1415926535897932384626433832795028841971693993751...
* PIX=3.1415926535897932384626433832795028841971693993751...
* 201 correct digits
* 18.09.2012 Walter Pachl
**********************************************************************/

options replace format comments java crossref savelog symbols nobinary

class RContinuedFractions03 public

  properties constant

    pi = '3.1415926535897932384626433832795028841971'||       -
         '693993751058209749445923078164062862089986280348'|| -
         '253421170679821480865132823066470938446095505822'|| -
         '317253594081284811174502841027019385211055596446'|| -
         '229489549303819644288109756659334461284756482337'|| -
         '867831652712019091456485669234603486104543266482'|| -
         '133936072602491412737245870066063155881748815209'|| -
         '209628292540917153643678925903600113305305488204'|| -
         '665213841469519415116094330572703657595919530921'|| -
         '861173819326117931051185480744623799627495673518'|| -
         '857527248912279381830119491298336733624'

  properties private static
--    al = '  7  15   1 292   1   1   1   2   1   3   1  14   2   1   1   2   2   2   2   1' - --  20
--         ' 84   2   1   1  15   3  13   1   4   2   6   6  99   1   2   2   6   3   5   1' - --  40
--         '  1   6   8   1   7   1   2   3   7   1   2   1   1  12   1   1   1   3   1   1' - --  60
--         '  8   1   1   2   1   6   1   1   5   2   2   3   1   2   4   4  16   1 161  45' - --  80
--         '  1  22   1   2   2   1   4   1   2  24   1   2   1   3   1   2   1   1  10   2' - -- 100
--         '  5   4   1   2   2   8   1   5   2   2  26   1   4   1   1   8   2  42   2   1' - -- 120
--         '  7   3   3   1   1   7   2   4   9   7   2   3   1  57   1  18   1   9  19   1' - -- 140
--         '  2  18   1   3   7  30   1   1   1   3   3   3   1   2   8   1   1   2   1  15' - -- 160
--         '  1   2  13   1   2   1   4   1  12   1   1   3   3  28   1  10   3   2  20   1' - -- 180
--         '  1   1   1   4   1   1   1   5   3   2   1   6   1   4'                           -- 193

    ax = [ -
       3,                                                                                                - --   0
       7,  15,   1, 292,   1,   1,   1,   2,   1,   3,   1,  14,   2,   1,   1,   2,   2,   2,   2,   1, - --  20
      84,   2,   1,   1,  15,   3,  13,   1,   4,   2,   6,   6,  99,   1,   2,   2,   6,   3,   5,   1, - --  40
       1,   6,   8,   1,   7,   1,   2,   3,   7,   1,   2,   1,   1,  12,   1,   1,   1,   3,   1,   1, - --  60
       8,   1,   1,   2,   1,   6,   1,   1,   5,   2,   2,   3,   1,   2,   4,   4,  16,   1, 161,  45, - --  80
       1,  22,   1,   2,   2,   1,   4,   1,   2,  24,   1,   2,   1,   3,   1,   2,   1,   1,  10,   2, - -- 100
       5,   4,   1,   2,   2,   8,   1,   5,   2,   2,  26,   1,   4,   1,   1,   8,   2,  42,   2,   1, - -- 120
       7,   3,   3,   1,   1,   7,   2,   4,   9,   7,   2,   3,   1,  57,   1,  18,   1,   9,  19,   1, - -- 140
       2,  18,   1,   3,   7,  30,   1,   1,   1,   3,   3,   3,   1,   2,   8,   1,   1,   2,   1,  15, - -- 160
       1,   2,  13,   1,   2,   1,   4,   1,  12,   1,   1,   3,   3,  28,   1,  10,   3,   2,  20,   1, - -- 180
       1,   1,   1,   4,   1,   1,   1,   5,   3,   2,   1,   6,   1,   4                                - -- 194
    ]
    A
    B

  method main(args = String[]) public static
--    Loop i = 1 By 1 while al <> ''
--      Parse al axi al
--      ax[i] = axi
--      End i
    pix = calc(ax.length - 1)

    Loop e = 1 To pi.length
      If pix.substr(e, 1) <> pi.substr(e, 1) Then Leave e
      End e

    Numeric Digits 50
    Say 'PI  =' (pi + 0) || '...'
    Say 'PIX =' (pix + 0) || '...'
    Say (e - 1) 'correct digits'
    Return

  method Get_Coeffs(n) private static
    A = ax[n]
    B = 1
    Return

  method Calc(n) private static
    Numeric Digits 1000
    Temp = 0
    loop ni = n to 1 by -1
      Get_Coeffs(ni)
      Temp = B / (A + Temp)
      end ni
    Get_Coeffs(0)
    return (A + Temp)

