/* NetRexx */

options replace format comments java crossref savelog symbols

/**
 * Using the in-built capabilities of your language, calculate the integer value of:
 * <br />
 * &nbsp;&nbsp;5<sup>4<sup>3<sup>2</sup></sup></sup>
 * <ul>
 * <li>Confirm that the first and last twenty digits of the answer are: <code>62060698786608744707...92256259918212890625</code></li>
 * <li>Find and show the number of decimal digits in the answer.</li>
 * </ul>
 * <p>
 * C.F. <a href="http://rosettacode.org/wiki/Long_multiplication">Long multiplication</a>
 * <h5>Note:</h5>
 * <ul>
 * <li>
 * Do not submit an implementation of <a href="http://en.wikipedia.org/wiki/arbitrary_precision_arithmetic">arbitrary precision arithmetic</a>.
 * The intention is to show the capabilities of the language as supplied. If a language has a
 * <a href="http://rosettacode.org/wiki/Talk:Arbitrary-precision_integers_(included)#Use_of_external_libraries"single, overwhelming, library</a>
 * of varied modules that is endorsed by its home site Ð such as
 * <a href="http://rosettacode.org/mw/index.php?title=CPAN&action=edit&redlink=1">CPAN</a>
 * for Perl or <a href="http://rosettacode.org/wiki/Boost">Boost</a> for C++ Ð then that may be used instead.
 * </li>
 * <li>
 * Strictly speaking, this should not be solved by fixed-precision numeric libraries where the precision has
 * to be manually set to a large value; although if this is the <strong>only</strong> recourse then it may be
 * used with a note explaining that the precision must be set manually to a large enough value.
 * </li>
 * </ul>
 *
 * @author Alan Sampson
 * @version 1.0
 * @see <a href="http://rosettacode.org/wiki/Arbitrary-precision_integers_(included)">rosettacode.org/wiki/Arbitrary-precision_integers_(included)</a>
 */

import java.math.BigInteger
import java.math.BigDecimal
import java.math.MathContext

numeric digits 30

nanoFactor = 10 ** 9
dlm = '-'.left(80, '-')

say dlm
say "useBigInteger:"
t1 = System.nanoTime
useBigInteger()
t2 = System.nanoTime
td = t2 - t1
say "Run time in seconds:" td / nanoFactor
say

say dlm
say "useBigDecimal:"
t1 = System.nanoTime
useBigDecimal()
t2 = System.nanoTime
td = t2 - t1
say "Run time in seconds:" td / nanoFactor
say

say dlm
say "useBuiltinMath:"
t1 = System.nanoTime
useBuiltinMath()
t2 = System.nanoTime
td = t2 - t1
say "Run time in seconds:" td / nanoFactor
say

return

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method useBigInteger() private static

  x = BigInteger.valueOf(5)
  x = x.pow(BigInteger.valueOf(4).pow(BigInteger.valueOf(3).pow(2).intValue()).intValue())
  n = Rexx(x.toString)

  check = "62060698786608744707...92256259918212890625"
  sample = n.left(20)"..."n.right(20)

  say "Expected result:"
  say check
  say "Actual result:"
  say sample
  say "digits:" n.length
  say

  if check = sample
  then
    say "Result confirmed"
  else
    say "Result does not satisfy test"

  return


-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method useBigDecimal() private static

  x = BigDecimal.valueOf(5)
  x = x.pow(BigDecimal.valueOf(4).pow(BigDecimal.valueOf(3).pow(2).intValue()).intValue())
  n = Rexx(x.toString)

  check = "62060698786608744707...92256259918212890625"
  sample = n.left(20)"..."n.right(20)

  say "Expected result:"
  say check
  say "Actual result:"
  say sample
  say "digits:" n.length
  say

  if check = sample
  then
    say "Result confirmed"
  else
    say "Result does not satisfy test"

  return
-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
 * Classic method using built-in capabilities of Rexx
 */ 
method useBuiltinMath() private static
  /* precision must be set manually */
  numeric digits 200000

  n = 5 ** (4  ** (3 ** 2))

  check = "62060698786608744707...92256259918212890625"
  sample = n.left(20)"..."n.right(20)

  say "Expected result:"
  say check
  say "Actual result:"
  say sample
  say "digits:" n.length
  say

  if check = sample
  then
    say "Result confirmed"
  else
    say "Result does not satisfy test"

/*

Result:

digits: 183231
62060698786608744707...92256259918212890625

Expected result:
62060698786608744707...92256259918212890625

 */

