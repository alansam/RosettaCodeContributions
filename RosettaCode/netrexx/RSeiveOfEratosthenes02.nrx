/* NetRexx */
options replace format comments java crossref symbols binary

import java.util.BitSet
import java.util.Vector

parse arg loWatermark hiWatermark .
if loWatermark = '' | loWatermark = '.' then loWatermark = 1
if hiWatermark = '' | hiWatermark = '.' then hiWatermark = 200

do
  if \loWatermark.datatype('w') | \hiWatermark.datatype('w') then -
    signal NumberFormatException('arguments must be whole numbers')
  if loWatermark > hiWatermark then -
    signal IllegalArgumentException('the start value must be less than the end value')

  beginProc = System.nanoTime()
  seiveBits = sieveOfEratosthenes_BitSet(hiWatermark)
  seiveProc = System.nanoTime()
  primes = getPrimes(seiveBits, loWatermark, hiWatermark)
  endProc = System.nanoTime()
  seiveTime = seiveProc - beginProc
  runTime = endProc - beginProc
  say 'List of prime numbers from' loWatermark 'to' hiWatermark 'via a "Sieve of Eratosthenes" algorithm:'
  say '  'primes.toString()
  say '  Count of primes:' primes.size()
  say 'Time in seive:' (Rexx seiveTime / 1000000000).format(null, 6)'s'
  say 'Processing time:' (Rexx runTime / 1000000000).format(null, 6)'s'
catch ex = Exception
  ex.printStackTrace
end

return

method sieveOfEratosthenes_BitSet(hn = int) public static binary returns BitSet

  sv = BitSet(int hn + 1) -- A vector of bits where for each bit: FALSE indicates its index is a prime
  ix = int
  jx = int
  sv.set(0) -- zero is not prime
  sv.set(1) -- one is not prime

  loop ix = 2 while ix * ix <= hn
    if \sv.get(ix) then loop jx = ix * ix by ix while jx <= hn
      sv.set(jx)
      end jx
    end ix

  return sv

method getPrimes(seive = BitSet, lo = int, hi = int) public constant binary returns Vector

  primes = Vector()
  loop p_ = lo to hi
    if seive.get(p_) then iterate p_
    primes.add(Integer(p_))
    end p_

  return primes

