/* NetRexx */
options replace format comments java crossref symbols binary

import java.util.Vector

parse arg loWatermark hiWatermark .
if loWatermark = '' | loWatermark = '.' then loWatermark = 1
if hiWatermark = '' | hiWatermark = '.' then hiWatermark = 200

do
  if \loWatermark.datatype('w') | \hiWatermark.datatype('w') then -
    signal NumberFormatException('arguments must be whole numbers')
  if loWatermark > hiWatermark then -
    signal IllegalArgumentException('the start value must be less than the end value')

  beginProc = System.nanoTime()
  seive = sieveOfEratosthenes_Rexx(hiWatermark)
  endProc = System.nanoTime()
  primes = getPrimes(seive, loWatermark, hiWatermark)
  runTime = endProc - beginProc
  reporter(primes, loWatermark, hiWatermark, runTime)
catch ex = Exception
  ex.printStackTrace
end

return

method reporter(primes = Vector, loWatermark = Rexx, hiWatermark = Rexx, runTime = Rexx) public constant

  say 'List of prime numbers from' loWatermark 'to' hiWatermark 'via a "Sieve of Eratosthenes" algorithm:'
  say '  'primes.toString()
  say '  Count of primes:' primes.size()
  say 'Processing time:' (runTime / 1000000000).format(null, 6)'s'

  return

method sieveOfEratosthenes_Rexx(hn = int) public static binary returns Rexx

  sv = Rexx(1)
  sv[1] = 0 -- one is not prime
  ix = int
  jx = int

  loop ix = 3 to hn by 2 while ix * ix <= hn
    if sv[ix] then loop jx = ix * 3 to hn by ix + ix
      sv[jx] = 0
      end jx
    end ix

  return sv

method getPrimes(seive = Rexx, lo = int, hi = int) private constant binary returns Vector

  primes = Vector()
  if lo <= 2 then primes.add(Long(2))
  loop p_ = 3 to hi by 2
    if p_ < lo then iterate p_
    if \seive[p_] then iterate p_
    primes.add(Long(p_))
    end p_

  return primes

method isTrue public constant binary returns boolean
  return 1 == 1

method isFalse public constant binary returns boolean
  return \isTrue

