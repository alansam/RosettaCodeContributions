/* NetRexx */
options replace format comments java crossref symbols nobinary

numeric digits 1000
runSample(arg)
return

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method runSample(arg) public static
  parse arg ordr fchar .
  if ordr = '' | ordr = '.' then ordr = 3
  -- Some unicode block characters
  -- https://en.wikipedia.org/wiki/Geometric_Shapes
  FULL_BLOCK       = '\u2588'
  LOWER_HALF_BLOCK = '\u2584'
  UPPER_HALF_BLOCK = '\u2580'
  LIGHT_SHADE      = '\u2591'
  MEDIUM_SHADE     = '\u2592'
  DARK_SHADE       = '\u2593'
  uBlocks = [ -
    DARK_SHADE, MEDIUM_SHADE, LIGHT_SHADE, FULL_BLOCK, LOWER_HALF_BLOCK, UPPER_HALF_BLOCK, -
    '#', '*', '.', 'X', '@' -
    ]
  if fchar = '' | fchar = '.' then do
    loop forever
      loop n = 0 to uBlocks.length - 1
        say (n + 1).right(3)':' uBlocks[n]
      end
      say 'Choose the index of the character you wish for the display from the above list [1]: \-'
      parse ask cn
      select
        when cn = '' then do
          filler = uBlocks[0]
          leave          
          end
        when \cn.datatype('w') then iterate
        when cn < 1 | cn > uBlocks.length then iterate
        otherwise do
          filler = uBlocks[cn - 1]
          leave
          end
        end
      end
    end
  else do
    filler = fchar
    end
  drawSierpinskiCarpet(ordr, filler)
  return

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method drawSierpinskiCarpet(ordr, filler = Rexx '@') public static binary
  x = long
  y = long
  powr = 3 ** ordr
  loop x = 0 to powr - 1
    loop y = 0 to powr - 1
      if isSierpinskiCarpetCellFilled(x, y) then cell = filler
      else                                       cell = ' '
      say cell'\-'
      end y
      say
    end x
  return

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method isSierpinskiCarpetCellFilled(x = long, y = long) public static binary returns boolean
  isTrue  = boolean (1 == 1)
  isFalse = \isTrue
  isFilled = isTrue
  loop label edge while x \= 0 & y \= 0
    if x // 3 = 1 & y // 3 = 1 then do
      isFilled = isFalse
      leave edge
      end
    x = x % 3
    y = y % 3
    end edge
  return isFilled

