/* NetRexx */
options replace format comments java crossref symbols nobinary
numeric digits 20                      /*use twenty digits precision.   */

-- =============================================================================
class RNumericalIntegration00

  properties private static
    test_ = 1

  /*----------------------------------LEFT_RECT subroutine----------------*/
  method left_rect(a, b, n) public static
    h = (b - a) / n
    sum = 0.0
    loop x = a by h for n
      sum = sum + f(x)
      end x
    return sum * h

  /*----------------------------------MIDPOINT_RECT subroutine------------*/
  method midpoint_rect(a, b, n) public static
    h = (b - a) / n
    sum = 0.0
    loop x = a + h / 2 by h for n
      sum = sum + f(x)
      end x
    return sum * h

  /*----------------------------------RIGHT_RECT subroutine---------------*/
  method right_rect(a, b, n) public static
    h = (b - a) / n
    sum = 0.0
    loop x = a + h by h for n
      sum = sum + f(x)
      end x
    return sum * h

  /*----------------------------------SIMPSON subroutine------------------*/
  method simpson(a, b, n) public static
    h = (b - a) / n
    sum1 = f(a + h / 2)
    sum2 = 0.0
    loop x = 1 to n - 1
      sum1 = sum1 + f(a + h * x + h * 0.5)
      sum2 = sum2 + f(a + x * h)
      end x
 
      return h * (f(a) + f(b) + 4 * sum1 + 2 * sum2) / 6

  /*----------------------------------TRAPEZOID subroutine----------------*/
  method trapezoid(a, b, n) public static
    h = (b - a) / n
    sum = 0.0
    loop x = a to b by h
      sum = sum + h * (f(x) + f(x + h)) * 0.5
      end x
    return sum

  /*----------------------------------F subroutine------------------------*/
  method f(z) private static
    if test_ == 1 then return z ** 3
    if test_ == 2 then return 1 / z
                       return z

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method runSample(arg) public static

    parse arg tests .
    if tests = '', tests < 1, tests > 4 then tests = 4
    loop test = 1 for tests                  /*perform the test suite.        */
      test_ = test;
      select
        when test == 1 then do; L = 0; H =    1; i =     100; end
        when test == 2 then do; L = 1; H =  100; i =    1000; end
        when test == 3 then do; L = 0; H = 5000; i = 5000000; end
        when test == 4 then do; L = 0; H = 6000; i = 5000000; end
        otherwise           do; L = 0; H =    1; i =     100; end
        end
      etime = System.nanoTime()
      arl =     left_rect(L, H, i)
      arm = midpoint_rect(L, H ,i)
      arr =    right_rect(L, H, i)
      asr =       simpson(L, H, i)
      atz =     trapezoid(L, H, i)
      etime = System.nanoTime() - etime
      say
      say ('test' test).centre(79, '-')   /*display a header for the test. */
      say '      left_rectangular('L", "H', 'i") = " arl.format(null, 6)
      say '  midpoint_rectangular('L", "H', 'i") = " arm.format(null, 6)
      say '     right_rectangular('L", "H', 'i") = " arr.format(null, 6)
      say '               simpson('L", "H', 'i") = " asr.format(null, 6)
      say '             trapezoid('L", "H', 'i") = " atz.format(null, 6)
      say ' Elapsed time:' Rexx(etime * 1e-9).format(4, 6)'s'
      end test
    return

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method main(args = String[]) public static
    arg = Rexx(args)
    runSample(arg)
    return

