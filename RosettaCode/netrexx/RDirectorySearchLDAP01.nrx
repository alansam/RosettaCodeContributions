/* NetRexx */
options replace format comments java crossref symbols binary

/*
 * CLASSPATH additions
 *
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/commons-collections-3.2.1.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/commons-io-2.3.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/commons-lang-2.6.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/commons-pool-1.6.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/dom4j-1.6.1.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/antlr-2.7.7.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/log4j-1.2.16.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/mina-core-2.0.4.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/shared-all-1.0.0-M12.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/slf4j-api-1.6.4.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/slf4j-log4j12-1.6.4.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/xml-apis-2.0.2.jar
 * /Users/alansampson/apache/directory/apache-ldap-api-1.0.0-M12-bin/lib/xpp3-1.1.4c.jar
 */

import org.apache.directory.ldap.client.api.LdapConnection
import org.apache.directory.ldap.client.api.LdapNetworkConnection
import org.apache.directory.shared.ldap.model.cursor.EntryCursor
import org.apache.directory.shared.ldap.model.entry.Entry
import org.apache.directory.shared.ldap.model.exception.LdapException
import org.apache.directory.shared.ldap.model.message.SearchScope
import org.slf4j.Logger
import org.slf4j.LoggerFactory

class RDirectorySearchLDAP01 public

  properties constant
    log_ = LoggerFactory.getLogger(RDirectorySearchLDAP01.class)
    isTrue = boolean (1 == 1)
    isFalse = boolean (1 \== 1)

  properties private static
    connection = LdapConnection

  method main(args = String[]) public static

    connected = isFalse
    do
      connected = setUp()
      if connected then do
        search()
        end

    finally
      if connected then do
        tearDown()
        end
    end

    return

  method search() static returns boolean

    state      = isTrue
    cursor     = EntryCursor
    baseDN     = String "o=mojo"
    filter     = String "(&(objectClass=person)(&(uid=*mil*)))"
    scope      = SearchScope.SUBTREE
    attributes = String[] [String "dn", "cn", "sn", "uid"]
    do
      if log_.isTraceEnabled() then log_.trace("LDAP search")
      cursor = connection.search(baseDN, filter, scope, attributes)
      loop ksearch = 1 while cursor.next()
        ev = cursor.get()
        if log_.isInfoEnabled() then log_.info("Search cursor entry count:" ksearch)
        if log_.isInfoEnabled() then log_.info(ev.toString())
        --say ev.toString()
        end ksearch
    catch lex = LdapException
      state = isFalse
      log_.error("LDAP Error in cursor loop: Iteration" ksearch, Throwable lex);
    catch ex = Exception
      state = isFalse
      log_.error("I/O Error in cursor loop: Iteration" ksearch, Throwable ex);
    end

    return state

  method setUp() static returns boolean

    state = isTrue
    ldapHostName = String "localhost" --"allendale.local"
    ldapPort = int 11389
    dnStr = String "uid=admin,ou=system";
    creds = String "secret";

    do
      if log_.isInfoEnabled() then log_.info("LDAP Connection to" ldapHostName "on port" ldapPort)
      connection = LdapNetworkConnection(ldapHostName, ldapPort)

      if log_.isTraceEnabled() then log_.trace("LDAP bind")
      connection.bind(dnStr, creds)
    catch lex = LdapException
      state = isFalse
      log_.error("LDAP Error", Throwable lex)
    catch iox = IOException
      state = isFalse
      log_.error("I/O Error", Throwable iox)
    end

    return state

  method tearDown() static returns boolean

    state = isTrue
    do
      if log_.isTraceEnabled() then log_.trace("LDAP unbind")
      connection.unBind()
    catch lex = LdapException
      state = isFalse
      log_.error("LDAP Error", Throwable lex)
    finally
      do
        connection.close()
      catch iox = IOException
        state = isFalse
        log_.error("I/O Error on connection.close()", Throwable iox)
      end
    end

    return state

