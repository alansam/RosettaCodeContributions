/* NetRexx */
options replace format comments java crossref savelog symbols nobinary

/**
 * @author Alan Sampson
 * @version 1.0
 * @see <a href="http://oeis.org/">The On-Line Encyclopedia of Integer Sequences&#8482; (OEIS&#8482;)</a>
 * @see <a href="http://oeisf.org/">The OEIS Foundation Inc.</a>
 */
class RSortingBeadsort

properties private static
  _ = Rexx

method main(args = String[]) public static
/*REXX program sorts a list of integers using a bead sort. */
 
 
             /*get some grassHopper numbers.                            */
grasshopper=1 4 10 12 22 26 30 46 54 62 66 78 94 110 126 134 138 158 162 186 190 222 254 270
 
 
 
             /*GreeenGrocer numbers are also called hexagonal pyramidal */
             /*             numbers.                                    */
greengrocer=0 4 16 40 80 140 224 336 480 660 880 1144 1456 1820 2240 2720 3264 3876 4560
 
 
             /*get some Bernoulli numerator numbers.                    */
bernN='1 -1 1 0 -1 0 1 0 -1 0 5 0 -691 0 7 0 -3617 0 43867 0 -174611 0 854513'
 
 
             /*Psi is also called the Reduced Totient function,  and    */
             /*    is also called Carmichale lambda, or LAMBDA function.*/
psi=1 1 2 2 4 2 6 2 6 4 10 2 12 6 4 4 16 6 18 4 6 10 22 2 20 12 18 6 28 4 30 8 10 16
 
 
 
list=grasshopper greengrocer bernN psi /*combine the four lists into one*/
 
 
showL('before sort',list)          /*show list before sorting. */
$=beadSort(list)                       /*invoke the bead sort.     */
showL(' after sort',$)             /*show  after array elements*/
exit
 
 
/*─────────────────────────────────────SHOW@ subroutine────────────*/
--beadSort: procedure expose _.; parse arg z
method beadSort(z) public static
$=''                                   /*this'll be the sorted list*/
low=999999999; high=-low               /*define the low and high #s*/
_=0                                   /*define all beads to zero. */
 
 
  loop j=1 until z==''                   /*pick the meat off the bone*/
  parse z x z
  if \x.datatype('Whole') then do
                               say; say '*** error! ***'; say
                               say 'element' j "in list isn't numeric:" x
                               say
                               exit 13
                               end
 
  x=x/1                                /*normalize number, it could*/
                                       /*be:  +4  007  5.  2e3 etc.*/
   _[x]=_[x+1]                           /*indicate this bead has a #*/
   low=low.min(x)                      /*keep track of the lowest #*/
  high=high.max(x)                     /* "     "    "  "  highest#*/
  end   /*j*/
--  trace results;nop
                                       /*now, collect the beads and*/
  loop m=low to high                     /*let them fall (to zero).  */
  if _[m]==0 then iterate               /*No bead here? Keep looking*/
--    loop n=1 for _[m]                    /*let the beads fall to  0. */
--    $=$ m                              /*add it to the sorted list.*/
--    end n
  end
 
return $
 
 
/*─────────────────────────────────────SHOW@ subroutine────────────*/
--showL: widthH=length(words(arg(2)))    /*maximum width of the index*/
method showL(arg1, arg2) public static
  widthH=arg2.words().length()    /*maximum width of the index*/
 
  loop j=1 for arg2.words()
  say 'element' j.right(widthH) arg1":" arg2.word(j).right(10)
  end
 
say '-'.copies(80)                     /*show a seperator line.    */
return

