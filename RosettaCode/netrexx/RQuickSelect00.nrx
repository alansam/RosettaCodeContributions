/* NetRexx */
options replace format comments java crossref symbols nobinary
/** @see <a href="http://en.wikipedia.org/wiki/Quickselect">http://en.wikipedia.org/wiki/Quickselect</a> */

runSample(arg)
return

-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
/*
  function partition(list, left, right, pivotIndex)
     pivotValue := list[pivotIndex]
     swap list[pivotIndex] and list[right]  // Move pivot to end
     storeIndex := left
     for i from left to right-1
         if list[i] <= pivotValue
             swap list[storeIndex] and list[i]
             increment storeIndex
     swap list[right] and list[storeIndex]  // Move pivot to its final place
     return storeIndex
 */
method qpartition(list, ileft, iright, pivotIndex) private static
  pivotValue = list[pivotIndex]
  list = swap(list, pivotIndex, iright) -- Move pivot to end
  storeIndex = ileft
  loop i_ = ileft to iright - 1
    if list[i_] <= pivotValue then do
      list = swap(list, storeIndex, i_)
      storeIndex = storeIndex + 1
      end
    end i_
  list = swap(list, iright, storeIndex) -- Move pivot to its final place
  return storeIndex

-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
/*
  // Returns the k-th smallest element of list within left..right inclusive.
  function select(list, left, right, k)
     if left = right        // If the list contains only one element
          return list[left]  // Return that element
     pivotIndex  := ...     // select a pivotIndex between left and right (inclusive)
     pivotNewIndex  := partition(list, left, right, pivotIndex)
     pivotDist  := pivotNewIndex - left + 1
     // The pivot is in its final sorted position,
     // so pivotDist reflects its 1-based position if list were sorted
     if pivotDist = k
         return list[pivotNewIndex]
     else if k < pivotDist
         return select(list, left, pivotNewIndex - 1, k)
     else
          return select(list, pivotNewIndex + 1, right, k - pivotDist)
 */
method qselect(list, k_, ileft = -1, iright = -1) public static
  if ileft  = -1 then ileft  = 1
  if iright = -1 then iright = list[0]
  if ileft > iright then parse (ileft iright) iright ileft -- ensure left is smaller than right

  if ileft = iright then do  -- If the list contains only one element
    returnVal = list[ileft]  -- Return that element
    end
  else do
    pivotIndex = Random().nextInt(iright - ileft + 1) + ileft -- select a pivotIndex between left and right (inclusive)
    pivotNewIndex = qpartition(list, ileft, iright, pivotIndex)
    pivotDist = pivotNewIndex - ileft + 1
    -- The pivot is in its final sorted position,
    -- so pivotDist reflects its 1-based position if list were sorted
    select
      when pivotDist = k_ then
        returnVal = list[pivotNewIndex]
      when k_ < pivotDist then
        returnVal = qselect(list, ileft, pivotNewIndex - 1, k_)
      otherwise
        returnVal = qselect(list, pivotNewIndex + 1, iright, k_ - pivotDist)
      end
    end
  return returnVal

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/*
  function select(list, left, right, k)
     loop
         pivotIndex := ...     // select pivotIndex between left and right
         pivotNewIndex := partition(list, left, right, pivotIndex)
         pivotDist := pivotNewIndex - left + 1
         if pivotDist = k
             return list[pivotNewIndex]
         else if k < pivotDist
             right := pivotNewIndex - 1
         else
             k := k - pivotDist
             left := pivotNewIndex + 1
 */
method qselectInPlace(list, k_, ileft = -1, iright = -1) public static
  if ileft  = -1 then ileft  = 1
  if iright = -1 then iright = list[0]

  loop label inplace forever
    pivotIndex = Random().nextInt(iright - ileft + 1) + ileft -- select pivotIndex between left and right
  pivotNewIndex = qpartition(list, ileft, iright, pivotIndex)
  pivotDist = pivotNewIndex - ileft + 1
  select
    when pivotDist = k_ then do
      returnVal = list[pivotNewIndex]
      leave inplace
      end
    when k_ < pivotDist then
      iright = pivotNewIndex - 1
    otherwise do
      k_ = k_ - pivotDist
      ileft = pivotNewIndex + 1
      end
    end    
    end inplace
  return returnVal

-- ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
method swap(list, i1, i2) private static
  if i1 \= i2 then do
    t1       = list[i1]
    list[i1] = list[i2]
    list[i2] = t1
    end
  return list

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method runSample(arg) private static
  say '='.copies(120)
  parse arg samplelist
  if samplelist = '' | samplelist = '.' then samplelist = 9 8 7 6 5 0 1 2 3 4
  items = samplelist.words
  say 'Input:'
  say '    'samplelist.space(1, ',').changestr(',', ', ')
  say

  say 'Using recursive and in-place versions of the algorithm:'
  rv = ''
  iv = ''
  loop k_ = 1 to items
    rv = rv qselect(buildIndexedString(samplelist), k_)
    iv = iv qselectInPlace(buildIndexedString(samplelist), k_)
    end k_
  say ' R:' rv.space(1, ',').changestr(',', ', ')
  say ' I:' iv.space(1, ',').changestr(',', ', ')
  say

  say 'Find the 4 smallest:'
  rv = ''
  iv = ''
  loop k_ = 1 to 4
    rv = rv qselect(buildIndexedString(samplelist), k_)
    iv = iv qselectInPlace(buildIndexedString(samplelist), k_)
    end k_
  say ' R:' rv.space(1, ',').changestr(',', ', ')
  say ' I:' iv.space(1, ',').changestr(',', ', ')
  say

  say 'Find the 3 largest:'
  rv = ''
  iv = ''
  loop k_ = items - 2 to items
    rv = rv qselect(buildIndexedString(samplelist), k_)
    iv = iv qselectInPlace(buildIndexedString(samplelist), k_)
    end k_
  say ' R:' rv.space(1, ',').changestr(',', ', ')
  say ' I:' iv.space(1, ',').changestr(',', ', ')
  say

  return

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method buildIndexedString(samplelist) private static
  list = 0
  list[0] = samplelist.words()
  loop k_ = 1 to list[0]
    list[k_] = samplelist.word(k_)
    end k_
  return list
  
