/* NetRexx */
options replace format comments java crossref symbols nobinary

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class RPlayfair public

  properties private constant --unused
    BTRUE  = boolean (1 == 1)
    BFALSE = \BTRUE
    A2Z = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

  properties indirect
    IJ = boolean
    encipher = boolean
    explain = boolean
    key
    keyMatrix
    plainText
    cipherText
    digraphs
    duplicationCharacter
    fillCharacter

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method RPlayfair(pt = '', ky = 'playfair', mode = 'E', IorQ = 'I', d_ = 'X', f_ = '', e_ = 'N') public
    if ky   = null then ky   = 'playfair'
    if mode = null then mode = 'E'
    if IorQ = null then IorQ = 'I'
    if d_   = null then d_   = 'X'
    if f_   = null then f_   = d_
    if e_   = null then e_   = 'N'
    IorQ = IorQ.upper
    mode = mode.upper
    d_   = d_.upper
    f_   = f_.upper
    if IorQ = 'I' | IorQ = 'J' then
      setIJ(BTRUE)
    else
      setIJ(BFALSE)
    if mode = 'D' then
      setEncipher(BFALSE) -- decipher
    else
      setEncipher(BTRUE)  -- encipher
    if 'YES'.abbrev(e_.upper, 1) then
      setExplain(BTRUE)
    else
      setExplain(BFALSE)
    setDuplicationCharacter(d_)
    if f_ = '' then f_ = d_
    setFillCharacter(f_)
    setKey(ky)
    buildKeyMatrix()
    setPlainText(pt)
    return

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method cipher() public
    if isEncipher() then
      d_  = 1
    else
      d_  = -1
  cipherText_ = ''
  digraphs_ = buildDigraphs()
  km = getKeyMatrix()
  if isExplain() then showKeyMatrix()
  loop dw = 1 to digraphs_.words()
    -- process the digraphs one at a time
    digraph = digraphs_.word(dw)
    cl = ''
    cr = ''
    -- get each letter from the digraph
    parse digraph dl +1 dr
    loop r_ = 1 to km[0] while (cl cr).words() < 4
      -- locate the row/col of each letter in the cipher matrix
      clx = km[r_].wordpos(dl)
      crx = km[r_].wordpos(dr)
      if clx > 0 then cl = r_ clx
      if crx > 0 then cr = r_ crx
      end r_

    -- process the digraph's rows, columns or rectangles
    select
      when cl.word(1) = cr.word(1) then do
        -- a row
        ptype = 'row'
        rx  = cl.word(1)
        clx = cl.word(2) + d_
        crx = cr.word(2) + d_
        if clx > 5 then clx = 1 -- wrap
        if crx > 5 then crx = 1
        if clx < 1 then clx = 5
        if crx < 1 then crx = 5
        cy = km[rx].word(clx) || km[rx].word(crx)
        cipherText_ = cipherText_ cy
        end
      when cl.word(2) = cr.word(2) then do
        -- a column
        ptype = 'column'
        cx  = cl.word(2)
        rlx = cl.word(1) + d_
        rrx = cr.word(1) + d_
        if rlx > 5 then rlx = 1 -- wrap
        if rrx > 5 then rrx = 1
        if rlx < 1 then rlx = 5
        if rrx < 1 then rrx = 5
        cy = km[rlx].word(cx) || km[rrx].word(cx)
        cipherText_ = cipherText_ cy
        end
      otherwise do
        -- a rectangle
        ptype = 'rectangle'
        r1  = cl.word(1)
        r2  = cr.word(1)
        cy = km[r1].word(cr.word(2)) || km[r2].word(cl.word(2))
        cipherText_ = cipherText_ cy
        end
      end
    if isExplain() then say digraph cl',' cr '-' cy '-' ptype
    end dw
  setCipherText(cipherText_.strip())
  return getCipherText()

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method setKey(ky) public
    kp = (ky || A2Z).upper()
    kr = ''
    loop while kp \= ''
      parse kp xx +1 kp
      if \xx.datatype('u') then iterate
      kr = kr xx
      kp = kp.changestr(xx, '')
      end
  
    if isIJ() then
      kr = kr.changestr('J', '')
    else
      kr = kr.changestr('Q', '')

    key = kr.space()
    return

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method getDigraphs() public
    if digraphs = null then
      digraphs = buildDigraphs()
    return digraphs

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method buildKeyMatrix() private
    km = ''
    kr = getKey()
    loop r_ = 1 while kr \= ''
      parse kr kp +10 kr
      km[0]  = r_
      km[r_] = kp
      end r_
    setKeyMatrix(km)
    return
  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method showKeyMatrix() public
    km = getKeyMatrix()
    loop r_= 1 to km[0]
      say r_.right(2) km[r_]
      end r_
    return

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method buildDigraphs() private
  if isEncipher() then eks = getDuplicationCharacter()
  else                 eks = ''
  text = getPlainText().upper()
  tp = text.translate('', A2Z)
  text = text.translate(' '.copies(tp.length()), tp).space(0)
  rtext = ''
  ll = ''

  loop while text \= ''
    parse text lc +1 text
    if ll \= lc then rtext = rtext || lc
    else             rtext = rtext || eks || lc
    ll = lc
    end

  -- I == J or remove Q fixup
  if isIJ() then
    parse 'J I' IorQ sc . -- fixup for a J in the text
  else
    parse 'Q K' IorQ sc . -- fixup for a Q in the text

  rtext = rtext.changestr(IorQ, sc)
  rtl = rtext.length()
  if rtl // 2 \= 0 then rtext = rtext || getFillCharacter()
  digraphs_ = ''
  loop while rtext \= ''
    parse rtext digraph +2 rtext
    digraphs_ = digraphs_ digraph
    end
  setDigraphs(digraphs_.space())
  return getDigraphs()

  -- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  method main(args = String[]) public static
    arg = Rexx(args)
    runSample(arg)
    return

-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
method runSample(arg) private static
  if arg \= '' then do
    parse arg ciph_ IorQ_ dbg_ key_ text_
    if ciph_ = '' | ciph_ = '.' then ciph_ = 'E'
    if IorQ_ = '' | IorQ_ = '.' then IorQ_ = 'I'
    if dbg_  = '' | dbg_  = '.' then dbg_  = 'N'
    if key_  = '' | key_  = '.' then key_  = 'plugh_xyzzy'
    if text_ = '' | text_ = '.' then text_ = 'NetRexx; not just a programing language for kings & queens!'
    say
    say '-'.copies(120)

    pf = RPlayfair(text_, key_, ciph_, IorQ_, null, null, dbg_)
    verify_ = pf.getDigraphs()
    cipherText_ = pf.cipher()
    say pf.getPlainText()
    say verify_
    say cipherText_
    if pf.isEncipher() then ciph_ = 'D'
    else                    ciph_ = 'E'
    pf = RPlayfair(cipherText_, key_, ciph_, IorQ_, null, null, dbg_)
    plainText_ = pf.cipher()
    say plainText_
    if verify_ == plainText_ then
      say 'Encipher/decipher verificaton succeeded'
    else
      say 'Encipher/decipher verificaton failed'
    say
    end
  else do  
    say
    say '-'.copies(120)

    ciphers = [ -
      RPlayfair('NetRexx; not just a programing language for kings & queens!', 'plugh_xyzzy'), -
      RPlayfair('Hide the gold in the tree stump!' ,'Playfair example'), -
      RPlayfair('KX JEYU REB EZW EHEW RYTU HE YFSKRE HE GOYFIWTT TUOLKS YCA JPOBO TE IZONTX BYBW T GONE YC UZWRGD S ONSXBOU YWR HEBAAHYUSED Q' ,'ROYAL NEW ZEALAND NAVY', 'D'), -
      RPlayfair('KXJEY UREBE ZWEHE WRYTU HEYFS KREHE GOYFI WUUTU OLKSY CAJPO BOTEI ZONTX BYBNT GONEY CUZWR GDSON SXBOU YWRHE BAAHY USEDQ' ,'ROYAL NEW ZEALAND NAVY', 'D'), -
      RPlayfair('PT BOAT ONE OWE NINE LOST IN ACION IN BLACKETT STRAIT TWO MILES SW MERESU COVE X CREW OF TWELVE X REQUEST ANY INFORMATION X' ,'ROYAL NEW ZEALAND NAVY', 'E', 'I', '', 'X', 'N'), -
      RPlayfair('NetRexx; not just a programing language for kings & queens!', 'plugh_xyzzy', null, 'Q') -
      ]
      /*         ....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8....+....9....+....0....+....1....+....2....+....3  */
    loop pf over ciphers
      cipherText_ = pf.cipher()
      verify_ = pf.getDigraphs()
      say pf.getPlainText()
      say verify_
      say cipherText_
      if pf.isIJ() then IQ = 'I'
      else              IQ = 'Q'
      if pf.isExplain() then dbg = 'Y'
      else                   dbg = 'N'
      if pf.isEncipher() then ED = 'D'
      else                    ED = 'E'
      px = RPlayfair(cipherText_, pf.getKey(), ED, IQ, pf.getDuplicationCharacter(), pf.getFillCharacter(), dbg)
      plainText_ = px.cipher()
      say plainText_
    if verify_ == plainText_ then
      say 'Encipher/decipher verificaton succeeded'
    else
      say 'Encipher/decipher verificaton failed'
      say
      end pf
    end

  return

/*
     1 2 3 4 5
   + - - - - -
 1 | R O Y A L 
 2 | N E W Z D 
 3 | V B C F G 
 4 | H I K M P 
 5 | Q S T U X

 KX JEYU REB EZW EHEW RYTU HE YFSKRE HE GOYFIWTT TUOLKS YCA JPOBO TE IZONTX BYBW T GONE YC UZWRGD S ONSXBOU YWR HEBAAHYUSED Q
 PT BOAT ONE OWE NINE LOST IN ACTION IN BLACKESS STRAIT TWO MILES SW MERESU COCE X CREW OF TWELVE X REQUEST ANY INFORMATION X

 KX JEYU REB EZW EHEW RYTU HE YFSKRE HE GOYFIWUU TUOLKS YCA JPOBO TE IZONTX BYBN T GONE YC UZWRGD S ONSXBOU YWR HEBAAHYUSED Q
 PT BOAT ONE OWE NINE LOST IN ACTION IN BLACKETT STRAIT TWO MILES SW MERESU COVE X CREW OF TWELVE X REQUEST ANY INFORMATION X

 PT BOAT ONE OWE NINE LOST IN ACION IN BLACKETT  STRAIT   TWO MILES   SW MERESU COVE X CREW OF TWELVE X REQUEST ANY INFORMATION X
 KX IEYU REB EZW EHEW RYTU HE YFSEE HE VRLKTWSQU TUOLKS Q UEY PKODT Q TE IZONTX BYBN T GONE YC UZWRGD S ONSXBOU YWR HEBAAHYUSED Q
 PT BOAT ONE OWE NINE LOST IN ACION IN BLACKETXT STRAIT X TWO MILES X SW MERESU COVE X CREW OF TWELVE X REQUEST ANY INFORMATION X
 */

