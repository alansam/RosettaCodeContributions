/* NetRexx */

options replace format comments java crossref savelog symbols nobinary utf8

/**
 * <h3>Vigenère cipher</h3>
 * <p>
 * Implement a <a href="http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher">Vigenère cipher</a>, both encryption
 * and decryption. The program should handle keys and text of unequal length, and should capitalize everything
 * and discard non-alphabetic characters. (If your program handles non-alphabetic characters in another way,
 * make a note of it.)
 * </p>
 *
 * @author Alan Sampson
 * @version 1.0
 * @see <a href="http://rosettacode.org/wiki/Vigen%C3%A8re_cipher">rosettacode.org/wiki/Vigen%C3%A8re_cipher</a>
 * @see <a href="http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher">http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher</a>
 * @see <a href="http://rosettacode.org/wiki/Vigen%C3%A8re_Cipher/Cryptanalysis">rosettacode.org/wiki/Vigen%C3%A8re_Cipher/Cryptanalysis</a>
 */

pt  = 'Attack at dawn!'
key = 'LEMON'
test(key, pt)

key = 'N' -- rot-13
test(key, pt)

key = 'B' -- Caesar
test(key, pt)

pt = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
key = 'A'
test(key, pt)

pt = sampledata()
key = 'Hamlet; Prince of Denmark'
test(key, pt)

pt = sampledata('Jab')
key = 'Through the Looking-Glass and What Alice Found There'
test(key, pt)

return

/**
 * The encipher algorithm for a Vigenère cipher.
 * <p>
 * Note: Encipherment nd decipherment differ only in the <strong>sign</strong> of the encipherment key
 * being applied to the text.  The <code>meth</code> parameter is examined to determine if encipher or
 * decipher is requested and sets up a factor to be applied to the key character to set it's sign
 * appropriately.
 * </p>
 *
 * @param meth the type of process; encipher of decipher
 * @param key the cipher key
 * @param text the text to encode/decode
 * @return the input text as manipulated by the algorithm
 */
method vigenere(meth, key, text) public static returns Rexx signals IllegalArgumentException

  select
    when 'encipher'.abbrev(meth.lower, 1) then df = 1
    when 'decipher'.abbrev(meth.lower, 1) then df = -1
    otherwise signal IllegalArgumentException(meth 'must be "encipher" or "decipher"')
    end

  alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

  text = stringscrubber(text) -- Clean up the text
  key  = stringscrubber(key)  -- Clean up the key
  code = ''

  -- This is the algorithm
  loop l_ = 1 to text.length()
    M = alpha.pos(text.substr(l_, 1)) - 1
    k_ = (l_ - 1) // key.length()
    K = alpha.pos(key.substr(k_ + 1, 1)) - 1
    C = mod((M + K * df), alpha.length())
    C = alpha.substr(C + 1, 1)
    code = code || C
    end l_

  return code

/**
 * Helper function - encipher
 *
 * @param key the cipher key
 * @param plaintext the text to encode
 * @return the cipher
 */
method vigenere_encipher(key, plaintext) public static returns Rexx signals IllegalArgumentException

  return vigenere('encipher', key, plaintext)

/**
 * Helper function - encipher
 *
 * @param key the cipher key
 * @param ciphertext the cipher to decode
 * @return the deciphered text
 */
method vigenere_decipher(key, ciphertext) public static

  return vigenere('decipher', key, ciphertext)

method mod(N = int, D = int) private static

return (D + (N // D)) // D

/**
 * Normalize the input to the text to ensure that it only contains characters that can be passed
 * to the cipher algorithm.
 * <p>
 * The algorithm only accepts the basic 26 alphabetic characters A-Z.  This method removes all spaces,
 * numerals, punctuation and special characters.
 * </p>
 *
 * @param cleanup a text string
 * @return a version of the text suitable for input into the cipher algorithm
 */
method stringscrubber(cleanup) private static returns Rexx signals IllegalArgumentException

  alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

  cleanup = cleanup.upper.space(0)
  loop label f_ forever
    x_ = cleanup.verify(alpha)
    if x_ = 0 then leave f_
    cleanup = cleanup.changestr(cleanup.substr(x_, 1), '')
    end f_

  return cleanup

/**
 * Testing
 *
 * @param key the key to use for this test
 * @param pt the text to run through the test
 */
method test(key, pt) private static

  ct = vigenere_encipher(key, pt)
  display(ct)
  dt = vigenere_decipher(key, ct)
  display(dt)

  return

/**
 * Present the result set in a readable form.
 * <p>
 * Formats the input as blocks of 5 characters, 12 blocks per line.  e.g:
 * </p>
 * <pre>
 * TOBEO RNOTT OBETH ATIST HEQUE STION WHETH ERTIS NOBLE RINTH EMIND TOSUF
 * FERTH ESLIN GSAND ARROW ...
 * </pre>
 *
 * @param text a message to format
 */
method display(text) public static

  line = ''
  o_ = 0
  loop c_ = 1 to text.length()
    b_ = o_ // 5
    o_ = o_ + 1
    if b_ = 0 then line = line' '
    line = line || text.substr(c_, 1)
    end c_

  say '....+....|'.copies(8)
  loop label l_ forever
    parse line w1 w2 w3 w4 w5 w6 W7 w8 w9 w10 w11 w12 line
    pline = w1 w2 w3 w4 w5 w6 w7 w8 w9 w10 w11 w12
    say pline.strip()
    if line.strip().length() = 0 then leave l_
    end l_
  say

  return

/**
 * Set up some sample data to make a realistic test.
 * <ol>
 * <li>
 * (The soliloquy from Hamlet, Act 3 Scene 1)
 * </li>
 * <li>
 * (Jabberwocky, by Lewis Carroll from Through the Looking-Glass and What Alice Found There, 1872)
 * </li>
 * </ol>
 *
 * @param what which text to return ("jabberwocky" or "hamlet")
 * @return a block of sample data
 */
method sampledata(what) private static returns Rexx

  NL = char('\n')  
  antic_disposition = Rexx[]

  antic_disposition = [                                         -
    Rexx("To be, or not to be--that is the question:"        ), -
    Rexx("Whether 'tis nobler in the mind to suffer"         ), -
    Rexx("The slings and arrows of outrageous fortune"       ), -
    Rexx("Or to take arms against a sea of troubles"         ), -
    Rexx("And by opposing end them. To die, to sleep--"      ), -
    Rexx("No more--and by a sleep to say we end"             ), -
    Rexx("The heartache, and the thousand natural shocks"    ), -
    Rexx("That flesh is heir to. 'Tis a consummation"        ), -
    Rexx("Devoutly to be wished. To die, to sleep--"         ), -
    Rexx("To sleep--perchance to dream: ay, there's the rub,"), -
    Rexx("For in that sleep of death what dreams may come"   ), -
    Rexx("When we have shuffled off this mortal coil,"       ), -
    Rexx("Must give us pause. There's the respect"           ), -
    Rexx("That makes calamity of so long life."              ), -
    Rexx("For who would bear the whips and scorns of time,"  ), -
    Rexx("Th' oppressor's wrong, the proud man's contumely"  ), -
    Rexx("The pangs of despised love, the law's delay,"      ), -
    Rexx("The insolence of office, and the spurns"           ), -
    Rexx("That patient merit of th' unworthy takes,"         ), -
    Rexx("When he himself might his quietus make"            ), -
    Rexx("With a bare bodkin? Who would fardels bear,"       ), -
    Rexx("To grunt and sweat under a weary life,"            ), -
    Rexx("But that the dread of something after death,"      ), -
    Rexx("The undiscovered country, from whose bourn"        ), -
    Rexx("No traveller returns, puzzles the will,"           ), -
    Rexx("And makes us rather bear those ills we have"       ), -
    Rexx("Than fly to others that we know not of?"           ), -
    Rexx("Thus conscience does make cowards of us all,"      ), -
    Rexx("And thus the native hue of resolution"             ), -
    Rexx("Is sicklied o'er with the pale cast of thought,"   ), -
    Rexx("And enterprise of great pith and moment"           ), -
    Rexx("With this regard their currents turn awry"         ), -
    Rexx("And lose the name of action. -- Soft you now,"     ), -
    Rexx("The fair Ophelia! -- Nymph, in thy orisons"        ), -
    Rexx("Be all my sins remembered."                        )  -
    ]

  jabberwocky = [ -
    Rexx('Twas brillig, and the slithy toves'         ), -
    Rexx('Did gyre and gimble in the wabe:'           ), -
    Rexx('All mimsy were the borogoves,'              ), -
    Rexx('And the mome raths outgrabe.'               ), -
    Rexx('"Beware the Jabberwock, my son!'            ), -
    Rexx('The jaws that bite, the claws that catch!'  ), -
    Rexx('Beware the Jubjub bird, and shun'           ), -
    Rexx('The frumious Bandersnatch!"'                ), -
    Rexx('He took his vorpal sword in hand:'          ), -
    Rexx('Long time the manxome foe he sought --'     ), -
    Rexx('So rested he by the Tumtum tree,'           ), -
    Rexx('And stood awhile in thought.'               ), -
    Rexx('And, as in uffish thought he stood,'        ), -
    Rexx('The Jabberwock, with eyes of flame,'        ), -
    Rexx('Came whiffling through the tulgey wood,'    ), -
    Rexx('And burbled as it came!'                    ), -
    Rexx('One, two! One, two! And through and through'), -
    Rexx('The vorpal blade went snicker-snack!'       ), -
    Rexx('He left it dead, and with its head'         ), -
    Rexx('He went galumphing back.'                   ), -
    Rexx('"And, has thou slain the Jabberwock?'       ), -
    Rexx('Come to my arms, my beamish boy!'           ), -
    Rexx('O frabjous day! Callooh! Callay!"'          ), -
    Rexx('He chortled in his joy.'                    ), -
    Rexx('Twas brillig, and the slithy toves'         ), -
    Rexx('Did gyre and gimble in the wabe;'           ), -
    Rexx('All mimsy were the borogoves,'              ), -
    Rexx('And the mome raths outgrabe.'               )  -
    ]

    melancholy_dane = Rexx('')
    loop l_ = 0 for antic_disposition.length
      melancholy_dane = melancholy_dane || antic_disposition[l_] || NL
      end l_

    looking_glass = Rexx('')
    loop l_ = 0 for jabberwocky.length
      looking_glass = looking_glass || jabberwocky[l_] || NL
      end l_

    select
      when 'hamlet'.abbrev(what.lower, 1) then text = melancholy_dane
      when 'jabberwocky'.abbrev(what.lower, 1) then text = looking_glass
      otherwise text = melancholy_dane
      end

    return text

/**
 * Get the default sample data
 *
 * @return a block of sample data
 */
method sampledata() private static returns Rexx

  return sampledata('H')

