/* NetRexx */

options replace format comments java crossref savelog symbols binary

placesList = [String -
    "UK  London",     "US  New York"   -
  , "US  Boston",     "US  Washington" -
  , "UK  Washington", "US  Birmingham" -
  , "UK  Birmingham", "UK  Boston"     -
]
sortedList = combSort(String[] Arrays.copyOf(placesList, placesList.length))

lists = [placesList, sortedList]
loop ln = 0 to lists.length - 1
  cl = lists[ln]
  loop ct = 0 to cl.length - 1
    say cl[ct]
    end ct
    say
  end ln

return

method combSort(input = String[]) public constant binary returns String[]

  /*
   * <pre>
   * function combsort(array input)
   *   gap := input.size //initialize gap size
   *   loop until gap = 1 and swaps = 0
   *     //update the gap value for a next comb. Below is an example
   *     gap := int(gap / 1.25)
   *     if gap < 1
   *       //minimum gap is 1
   *       gap := 1
   *     end if
   *     i := 0
   *     swaps := 0 //see Bubble Sort for an explanation
   *     //a single "comb" over the input list
   *     loop until i + gap >= input.size //see Shell sort for similar idea
   *       if input[i] > input[i+gap]
   *         swap(input[i], input[i+gap])
   *         swaps := 1 // Flag a swap has occurred, so the
   *                    // list is not guaranteed sorted
   *       end if
   *       i := i + 1
   *     end loop
   *   end loop
   * end function
   * </pre>
   */

  swaps = isTrue
  gap = input.length
  loop label comb until gap = 1 & \swaps
    gap = int gap / 1.25
    if gap < 1 then
      gap = 1
    i_ = 0
    swaps = isFalse
    loop label swaps until i_ + gap >= input.length
      if input[i_].compareTo(input[i_ + gap]) > 0 then do
        swap            = input[i_]
        input[i_]       = input[i_ + gap]
        input[i_ + gap] = swap
        swaps           = isTrue
        end
        i_ = i_ + 1
      end swaps
    end comb

  return input

method isTrue public constant binary returns boolean
  return 1 == 1

method isFalse public constant binary returns boolean
  return \isTrue

