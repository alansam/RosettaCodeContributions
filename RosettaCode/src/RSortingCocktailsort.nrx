/* NetRexx */

options replace format comments java crossref savelog symbols binary

import java.util.List

placesList = [String -
    "UK  London",     "US  New York"   , "US  Boston",     "US  Washington" -
  , "UK  Washington", "US  Birmingham" , "UK  Birmingham", "UK  Boston"     -
]
sortedList = cocktailSort(String[] Arrays.copyOf(placesList, placesList.length))

lists = [placesList, sortedList]
loop ln = 0 to lists.length - 1
  cl = lists[ln]
  loop ct = 0 to cl.length - 1
    say cl[ct]
    end ct
    say
  end ln

return

method cocktailSort(A = String[]) public constant binary returns String[]

  rl = String[A.length]
  al = List cocktailSort(Arrays.asList(A))
  al.toArray(rl)

  return rl

method cocktailSort(A = List) public constant binary returns ArrayList

  /*
   * The cocktail shaker sort is an improvement on the Bubble Sort. The improvement is basically that values
   * "bubble" both directions through the array, because on each iteration the cocktail shaker sort bubble
   * sorts once forwards and once backwards.
   *
   * Pseudocode for the algorithm (from wikipedia):
   * <pre>
   * function cocktailSort( A : list of sortable items )
   *   do
   *     swapped := false
   *     for each i in 0 to length( A ) - 2 do
   *       if A[ i ] > A[ i+1 ] then // test whether the two 
   *                                 // elements are in the wrong 
   *                                 // order
   *         swap( A[ i ], A[ i+1 ] ) // let the two elements
   *                                  // change places
   *         swapped := true;
   *     if swapped = false then
   *       // we can exit the outer loop here if no swaps occurred.
   *       break do-while loop;
   *     swapped := false
   *     for each i in length( A ) - 2 down to 0 do
   *       if A[ i ] > A[ i+1 ] then
   *         swap( A[ i ], A[ i+1 ] )
   *         swapped := true;
   *   while swapped; // if no elements have been swapped, 
   *                  // then the list is sorted
   * </pre>
   */

  Alength = A.size
  swapped = isFalse
  loop label swapped until \swapped
    swapped = isFalse
    loop i_ = 0 to Alength - 2
      if (Comparable A.get(i_)).compareTo(Comparable A.get(i_ + 1)) > 0 then do
        swap = A.get(i_ + 1)
        A.set(i_ + 1, A.get(i_))
        A.set(i_, swap)
        swapped = isTrue
        end
      end i_
    if \swapped then do
      iterate swapped
      end
    swapped = isFalse
    loop i_ = Alength - 2 to 0 by -1
      if (Comparable A.get(i_)).compareTo(Comparable A.get(i_ + 1)) > 0 then do
        swap = A.get(i_ + 1)
        A.set(i_ + 1, A.get(i_))
        A.set(i_, swap)
        swapped = isTrue
        end
      end i_
    end swapped
  
  return ArrayList(A)

method isTrue public constant binary returns boolean
  return 1 == 1

method isFalse public constant binary returns boolean
  return \isTrue

