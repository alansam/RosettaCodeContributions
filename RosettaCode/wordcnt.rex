/* REXX WORDSOUT
   TSO and/or ISPF ONLY
   REXX command to count the frequency of words in a file

   to use: 
   WORDSOUT the-dataset-to-be-counted

   SHOWS WORD FREQUENCY IN A FILE
   LARGE FILES WILL TAKE A VERY LONG TIME AND/OR BLOW OUT ON MEMORY
          (A REALLY LONG TIME)

  for REXX information, Sample Code, books see

                   http://www.theamericanprogrammer.com/programming/index.shtml

  may be distributed provided this entire comment is included


TRACE R
*/

ARG FILE_NAME .

IF FILE_NAME = "" THEN DO
   SAY "PLEASE TYPE IN FILE NAME TO BE READ IN"
   SAY "STANDARD TSO NAMING CONVENTIONS"
   PULL FILE_NAME
   IF FILE_NAME = "" THEN EXIT
   END

IF ADDRESS() = "TSO" | ADDRESS() = "ISPEXEC" |,
   ADDRESS() = "MVS"
   THEN NOP
   ELSE SIGNAL BAD_ENVIRONMENT

IF SYSDSN(FILE_NAME) <> "OK" THEN SIGNAL BAD_FILE
"ALLOC DDN(WORDSIN) SHR REUSE DSN("FILE_NAME")"

SIGNAL ON HALT
SIGNAL ON SYNTAX

DROP_01 = "," /* CHARACTER TO CHANGE TO A SPACE */
DROP_02 = "." /* CHARACTER TO CHANGE TO A SPACE */
DROP_03 = "!" /* CHARACTER TO CHANGE TO A SPACE */
DROP_04 = "!" /* ADD YOUR OWN  */
DROP_05 = "!" /* DUPLICATES OK */
DROP_06 = "!" /* DUPLICATES OK */
DROP_07 = "!" /* DUPLICATES OK */


ARRAY_INDEX = 0
TOTAL_WORDS = 0

EOF = "NO"
CALL READIT
DO WHILE EOF = "NO"
   CALL PROCESS
   CALL READIT
END

DO QUEUED();PULL;END
CALL SHOW_ALL

SAY
SAY "TOTAL WORDS " TOTAL_WORDS

EXIT

READIT:
"EXECIO 1 DISKR WORDSIN"
IF RC <> 0 THEN EOF = "YES"
RETURN

PROCESS:
PULL RECORD
RECORD = TRANSLATE(RECORD," ",DROP_01) /* DROP CHARACTERS */
RECORD = TRANSLATE(RECORD," ",DROP_02)
RECORD = TRANSLATE(RECORD," ",DROP_03)
RECORD = TRANSLATE(RECORD," ",DROP_04) /* ADD MORE IF NEEDED */
RECORD = TRANSLATE(RECORD," ",DROP_05) /* ADD MORE IF NEEDED */
RECORD = TRANSLATE(RECORD," ",DROP_06) /* ADD MORE IF NEEDED */
RECORD = TRANSLATE(RECORD," ",DROP_07) /* ADD MORE IF NEEDED */
DO EACH_WORD = 1 TO WORDS(RECORD)
   CALL PROCESS_WORD WORD(RECORD,EACH_WORD)
END EACH_WORD

RETURN

PROCESS_WORD:
ARG PROCESS_THIS_WORD
IF DATATYPE(PROCESS_THIS_WORD) = "NUM" THEN RETURN
STATUS = SYMBOL('ROOT.PROCESS_THIS_WORD')
IF STATUS = "VAR" THEN CALL PROCESS_OLD_WORD
IF STATUS = "LIT" THEN CALL PROCESS_NEW_WORD

RETURN
INTERPRET 'STATUS = SYMBOL("'ROOT.PROCESS_THIS_WORD'")'
SAY STATUS
SAY STATUS

PROCESS_NEW_WORD:
ROOT.PROCESS_THIS_WORD = 1
ARRAY_INDEX = ARRAY_INDEX + 1
ARRAY_INDEX_MAX   = ARRAY_INDEX
ARRAY.ARRAY_INDEX = PROCESS_THIS_WORD

RETURN

PROCESS_OLD_WORD:
ROOT.PROCESS_THIS_WORD = ROOT.PROCESS_THIS_WORD + 1

RETURN

HALT:
SYNTAX:
DO QUEUED();PULL;END
EXIT

SHOW_ALL:
CALL SORT_ARRAY
DO I = 1 TO ARRAY_INDEX_MAX
  TEMP = ARRAY.I
  SAY LEFT(TEMP,15) ROOT.TEMP
  TOTAL_WORDS = TOTAL_WORDS + ROOT.TEMP
END I
RETURN

SORT_ARRAY:
DO I = 1 TO ARRAY_INDEX_MAX - 1
   DO J = 1 TO ARRAY_INDEX_MAX - 1
      J_PLUS_1 = J + 1
      IF ARRAY.J > ARRAY.J_PLUS_1 THEN CALL FLIPEM
   END J
END I
RETURN

FLIPEM:
TEMP = ARRAY.J
ARRAY.J = ARRAY.J_PLUS_1
ARRAY.J_PLUS_1 = TEMP
RETURN

BAD_ENVIRONMENT:
SAY "THIS MAY BE RUN UNDER OS390 TSO/ISPF ONLY"
EXIT

BAD_FILE:
SAY "THE FILE NAME SUPPLIED IS INVALID OR DOES NOT EXIST"
EXIT
/*** 
    See  
    http://www.theamericanprogrammer.com/programming/index.shtml
 
    
***/

