/* Generated from 'RCSortIntArrayREXX01.nrx' 12 Jul 2011 20:51:40 [v3.00] */
/* Options: Comments Crossref Decimal Format Java Logo Replace Symbols Trace2 Verbose3 */

/* NetRexx */


/*REXX program to sort an integer array.*/

/*handle larger numbers.*/

public class RCSortIntArrayREXX01{
 private static final netrexx.lang.Rexx $01=new netrexx.lang.Rexx((byte)20);
 private static final netrexx.lang.Rexx $02=new netrexx.lang.Rexx(1);
 private static final netrexx.lang.Rexx $03=new netrexx.lang.Rexx(61);
 private static final netrexx.lang.Rexx $04=new netrexx.lang.Rexx(50521);
 private static final netrexx.lang.Rexx $05=new netrexx.lang.Rexx(199360981);
 private static final netrexx.lang.Rexx $06=new netrexx.lang.Rexx(2);
 private static final netrexx.lang.Rexx $07=new netrexx.lang.Rexx('=');
 private static final java.lang.String $0="RCSortIntArrayREXX01.nrx";
 private static final netrexx.lang.RexxSet $1=new netrexx.lang.RexxSet();
 static{$1.setDigits($01);}
 
 public static void main(java.lang.String $0s[]){
  netrexx.lang.Rexx a;
  netrexx.lang.Rexx size;
  a=netrexx.lang.Rexx.toRexx("");
  a.getnode(new netrexx.lang.Rexx((byte)1)).leaf=new netrexx.lang.Rexx((byte)1);
  a.getnode(new netrexx.lang.Rexx((byte)2)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)3)).leaf=$02.OpMinus($1);
  a.getnode(new netrexx.lang.Rexx((byte)4)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)5)).leaf=new netrexx.lang.Rexx((byte)5);
  a.getnode(new netrexx.lang.Rexx((byte)6)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)7)).leaf=$03.OpMinus($1);
  a.getnode(new netrexx.lang.Rexx((byte)8)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)9)).leaf=new netrexx.lang.Rexx((short)1385);
  a.getnode(new netrexx.lang.Rexx((byte)10)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)11)).leaf=$04.OpMinus($1);
  a.getnode(new netrexx.lang.Rexx((byte)12)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)13)).leaf=new netrexx.lang.Rexx(2702765);
  a.getnode(new netrexx.lang.Rexx((byte)14)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)15)).leaf=$05.OpMinus($1);
  a.getnode(new netrexx.lang.Rexx((byte)16)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)17)).leaf=new netrexx.lang.Rexx("19391512145");
  a.getnode(new netrexx.lang.Rexx((byte)18)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)19)).leaf=new netrexx.lang.Rexx("2404879675441").OpMinus($1);
  a.getnode(new netrexx.lang.Rexx((byte)20)).leaf=new netrexx.lang.Rexx((byte)0);
  a.getnode(new netrexx.lang.Rexx((byte)21)).leaf=new netrexx.lang.Rexx("370371188237525");
  
  size=new netrexx.lang.Rexx((byte)21);/*we have a list of 21 Euler numbers.*/
  tell(netrexx.lang.Rexx.toRexx("un-sorted"),a,size);
  a.getnode(new netrexx.lang.Rexx((byte)0)).leaf=size;
  esort(a,new netrexx.lang.Rexx((byte)1));
  tell(netrexx.lang.Rexx.toRexx("   sorted"),a,size);
  
  return;
  }

 /*----------------------------------ESORT subroutine--------------------*/
 
 public static void esort(netrexx.lang.Rexx a,netrexx.lang.Rexx size){
  netrexx.lang.Rexx h;
  netrexx.lang.Rexx i=null;
  netrexx.lang.Rexx j=null;
  netrexx.lang.Rexx k=null;
  netrexx.lang.Rexx t=null;
  //esort: procedure expose a.;
  
  h=a.getnode(new netrexx.lang.Rexx((byte)0)).leaf;
  
  {for(;;){if(!h.OpGt($1,$02))break;
   h=h.OpDivI($1,$06);
   {int $2=(a.getnode(new netrexx.lang.Rexx((byte)0)).leaf).OpSub($1,h).OpPlus($1).toint();i=new netrexx.lang.Rexx((byte)1);i:for(;$2>0;$2--,i=i.OpAdd($1,new netrexx.lang.Rexx(1))){
    j=i;
    k=h.OpAdd($1,i);
    {$3:for(;;){if(!(a.getnode(k).leaf).OpLt($1,a.getnode(j).leaf))break;
     t=a.getnode(j).leaf;
     a.getnode(j).leaf=a.getnode(k).leaf;
     a.getnode(k).leaf=t;
     if (h.OpGtEq($1,j)) 
      break $3;
     j=j.OpSub($1,h);
     k=k.OpSub($1,h);
     }
    }
    }
   }/*i*/
   }
  }
  
  return;
  }

 /*----------------------------------TELL subroutine---------------------*/
 
 public static void tell(netrexx.lang.Rexx arg,netrexx.lang.Rexx a,netrexx.lang.Rexx size){
  netrexx.lang.Rexx j=null;
  //tell:
  
  netrexx.lang.RexxIO.Say(arg.center(new netrexx.lang.Rexx((byte)40),new netrexx.lang.Rexx('-')));
  {int $4=size.OpPlus($1).toint();j=new netrexx.lang.Rexx((byte)1);j:for(;$4>0;$4--,j=j.OpAdd($1,new netrexx.lang.Rexx(1))){
   netrexx.lang.RexxIO.Say((((arg.OpCcblank($1,netrexx.lang.Rexx.toRexx("array element"))).OpCcblank($1,j.right(size.length()))).OpCc($1,$07)).OpCc($1,a.getnode(j).leaf.right(new netrexx.lang.Rexx((byte)25))));
   }
  }/*j*/
  netrexx.lang.RexxIO.Say("");
  
  return;
  }
 
 private RCSortIntArrayREXX01(){return;}
 }
