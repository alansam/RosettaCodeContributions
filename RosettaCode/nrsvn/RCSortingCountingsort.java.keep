/* Generated from 'RCSortingCountingsort.nrx' 21 Sep 2011 20:48:17 [v3.00] */
/* Options: Binary Comments Crossref Decimal Format Java Logo Replace Symbols Trace2 Verbose3 */

/* NetRexx */





public class RCSortingCountingsort{
 private static final netrexx.lang.Rexx $01=new netrexx.lang.Rexx('[');
 private static final netrexx.lang.Rexx $02=new netrexx.lang.Rexx(']');
 private static final java.lang.String $0="RCSortingCountingsort.nrx";
 
 public static void main(java.lang.String $0s[]){
  int icounts[];
  int scounts[];
  int lists[][];
  int ln=0;
  int cl[]=null;
  netrexx.lang.Rexx rep=null;
  int ct=0;
  icounts=new int[]{1,3,6,2,7,13,20,12,21,11,22,10,23,9,24,8,25,43,62,42,63,41,18,42,17,43,16,44,15,45,14,46,79,113,78,114,77,39,78,38};
  
  
  
  
  
  scounts=new int[icounts.length];
  
  java.lang.System.arraycopy((java.lang.Object)icounts,0,(java.lang.Object)scounts,0,icounts.length);
  lists=new int[][]{icounts,countingSort(scounts)};
  
  
  
  
  {int $1=lists.length-1;ln=0;ln:for(;ln<=$1;ln++){
   cl=lists[ln];
   rep=new netrexx.lang.Rexx("");
   {int $2=cl.length-1;ct=0;ct:for(;ct<=$2;ct++){
    rep=rep.OpCcblank(null,new netrexx.lang.Rexx(cl[ct]));
    }
   }/*ct*/
   netrexx.lang.RexxIO.Say(($01.OpCc(null,rep.strip().changestr(new netrexx.lang.Rexx(' '),new netrexx.lang.Rexx(',')))).OpCc(null,$02));
   }
  }/*ln*/
  
  return;
  }

 
 public static final int getMin(int array[]){
  int amin;
  int x_=0;
  
  amin=java.lang.Integer.MAX_VALUE;
  {int $3=array.length-1;x_=0;x_:for(;x_<=$3;x_++){
   if (array[x_]<amin) 
    amin=array[x_];
   }
  }/*x_*/
  
  return amin;
  }

 
 public static final int getMax(int array[]){
  int amax;
  int x_=0;
  
  amax=java.lang.Integer.MIN_VALUE;
  {int $4=array.length-1;x_=0;x_:for(;x_<=$4;x_++){
   if (array[x_]>amax) 
    amax=array[x_];
   }
  }/*x_*/
  
  return amax;
  }

 
 public static final int[] countingSort(int array[]){
  return countingSort(array,getMin(array),getMax(array));
  }
 public static final int[] countingSort(int array[],int amin){
  return countingSort(array,amin,getMax(array));
  }
 public static final int[] countingSort(int array[],int amin,int amax){
  int count[];
  int nr=0;
  int numbr=0;
  int z_;
  int i_=0;
  
  count=new int[(amax-amin)+1];
  {int $5=array.length-1;nr=0;nr:for(;nr<=$5;nr++){
   numbr=array[nr];
   count[numbr-amin]=(count[numbr-amin])+1;
   }
  }/*nr*/
  
  z_=0;
  
  {int $6=amax;i_=amin;i_:for(;i_<=$6;i_++){
   {count:for(;;){if(!((count[i_-amin])>0))break;
    array[z_]=i_;
    z_++;
    count[i_-amin]=(count[i_-amin])-1;
    }
   }/*count*/
   }
  }/*i_*/
  
  return array;
  }
 
 private RCSortingCountingsort(){return;}
 }
