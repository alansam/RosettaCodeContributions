/* NetRexx */

options replace format comments java crossref savelog symbols nobinary

/** @see <a href="http://mathforum.org/library/drmath/view/55837.html">http://mathforum.org/library/drmath/view/55837.html</a> */

days = 'Monday Tuesday Wednesday Thursday Friday Saturday Sunday'
yearRanges = [int 2008, 2121]

searchday = ''
searchday['index'] = days.wordpos('Sunday')
searchday[0] = 0

algorithmName = ['Java Calendar', 'Zeller[1]', 'Zeller[2]', 'Sakamoto', 'Gauss', 'Keith', 'Babwani']

loop alg = 0 to algorithmName.length - 1
  sd = searchday[0] + 1
  searchday[0] = sd
  searchday['agorithm', sd] = algorithmName[alg]
  loop year = yearRanges[0] to yearRanges[1]
    select case alg
      when 0 then dayIndex = getDaynumJavaLibrary(year, 12, 25)
      when 1 then dayIndex = getDaynumZellersCongruenceV1(year, 12, 25)
      when 2 then dayIndex = getDaynumZellersCongruenceV2(year, 12, 25)
      when 3 then dayIndex = getDaynumSakamoto(year, 12, 25)
      when 4 then dayIndex = getDaynumGauss(year, 12, 25)
      when 5 then dayIndex = getDaynumKeith(year, 12, 25)
      when 6 then dayIndex = getDaynumBabwani(year, 12, 25)
      otherwise nop
      end
    if dayIndex = searchday['index'] then
      searchday[sd] = searchday[sd] year
    end year
  end alg

-- display results
say 'Between' yearRanges[0] 'and' yearRanges[1]', Christmas day falls on a Sunday in the following years:'
loop r_ = 1 to searchday[0]
  searchday[r_] = searchday[r_].strip.changestr(' ', ',')
  say searchday['agorithm', r_].right(20)':' searchday[r_]
  end r_

/*
ly = 2011
lm = 12
ld = 31
loop d_ = 1 to ld
  dayIndex = getDaynumGauss(ly, lm, d_)
  say ly.right(4, 0)'-'lm.right(2, 0)'-'d_.right(2, 0)':'dayIndex
  end d_
*/

return

-- -----------------------------------------------------------------------------
method getDaynumJavaLibrary(Year = int, Month = int, Day = int, iso = Rexx 'Y') public static binary returns int

  -- The day-of-week is an integer value where 1 is Sunday, 2 is Monday, ..., and 7 is Saturday
  -- For an ISO week date Day-of-Week d (1 = Monday to 7 = Sunday), use d = ((h - 1 + 6) mod 7) + 1

  cal = Calendar
  jmNumber = [ -
      Calendar.JANUARY,   Calendar.FEBRUARY, Calendar.MARCH,    Calendar.APRIL    -
    , Calendar.MAY,       Calendar.JUNE,     Calendar.JULY,     Calendar.AUGUST   -
    , Calendar.SEPTEMBER, Calendar.OCTOBER,  Calendar.NOVEMBER, Calendar.DECEMBER -
    ]

  mon = jmNumber[Month - 1]
  cal = GregorianCalendar(Year, mon, Day)
  h   = cal.get(Calendar.DAY_OF_WEEK)

  if 'YES'.abbrev(iso.upper, 1) then w = ((h - 1 + 6) // 7) + 1
                                else w = h

  return w

-- -----------------------------------------------------------------------------
method getDaynumZellersCongruenceV1(Year = int, Month = int, Day = int, iso = Rexx 'Y') public static returns int

  -- +--------------------------------------------------------------------------
  -- +  January and February are treated as month 13 and 14,
  -- +  respecively, from the year before.
  -- +--------------------------------------------------------------------------
--  MonthIndex = Month          -- Save month number
--  YearIndex  = Year           -- Save year number
  if Month = 1 | Month = 2 then do
    Month = Month + 12
    Year  = Year - 1
    end

  -- +--------------------------------------------------------------------------
  -- +  The formula f(D)=(D+(2M+3(M+1)/5))+Y+Y/4-Y/100+Y/400) mod 7 is applied.
  -- +  Where:
  -- +   D:  Day of month
  -- +   M:  Month (3 to 14 - March to Feb.)
  -- +   Y:  Year
  -- +   All divisions are assumed integer.
  -- +
  -- +   f(D) results in an integer in the range 0-6
  -- +   where 0 represents Monday etc.
  -- +--------------------------------------------------------------------------
  MonthFactor = 2 * Month + 3 * (Month + 1) % 5
  YearFactor  = Year + Year % 4 - Year % 100 + Year % 400
  DayNum      = (Day + MonthFactor + YearFactor) // 7

  if 'YES'.abbrev(iso.upper, 1) then d = DayNum + 1 /* Increment to allow indexing from 1 */
                                else d = DayNum

  return d

-- -----------------------------------------------------------------------------
method getDaynumZellersCongruenceV2(Year = int, Month = int, Day = int, iso = Rexx 'Y') public static binary returns int

  if Month < 3 then do
    Month = Month + 12
    Year  = Year - 1
    end

  /*
   h is the day of the week (0 = Saturday, 1 = Sunday, 2 = Monday, ...)
   q is the date of the month
   m is the month (3 = March, 4 = April, 5 = May, ..., 14 = February)
   K the year of the century ().
   J is the century (actually ) (For example, in 1995 the century would be 19, even though it was the 20th century.)
   Y is the year
  For an ISO week date Day-of-Week d (1 = Monday to 7 = Sunday), use d = ((h + 5) mod 7) + 1
   */
  q = Day
  m = Month
  --K = Year // 100
  --J = year % 100
  Y = Year

  --h = (q + Math.floor((m + 1) * 26 / 10) + K + Math.floor(K / 4) + Math.floor(J / 4) + 5 * J)) // 7
  --h = (q + Math.floor((m + 1) * 26 / 10) + Y + Math.floor(Y / 4) + 6 * Math.floor(Y / 100) + Math.floor(Y / 400)) // 7
  h = (q + ((m + 1) * 26 % 10) + Y + (Y % 4) + 6 * (Y % 100) + (Y % 400)) // 7

  if 'YES'.abbrev(iso.upper, 1) then d = ((h + 5) // 7) + 1
                                else d = h

  return d

-- -----------------------------------------------------------------------------
method getDaynumSakamoto(y = int, m = int, d = int, iso = Rexx 'Y') public static binary returns int

 /*
  h is the day of the week (0 = Sunday, 1 = Monday, 2 = Tuesday...)
  d is the date of the month
  m is the month (3 = March, 4 = April, 5 = May, ..., 14 = February)
  y is the year
  For an ISO week date Day-of-Week d (1 = Monday to 7 = Sunday), use d = ((h + 6) mod 7) + 1
  */

  t = [int 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4]
  y = y - (m < 3)
  --h = (y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) + t[m - 1] + d) // 7
  h = (y + y % 4 - y % 100 + y % 400 + t[m - 1] + d) // 7

  if 'YES'.abbrev(iso.upper, 1) then d = ((h + 6) // 7) + 1
                                else d = h

  return d

-- -----------------------------------------------------------------------------
method getDaynumGauss(Year = int, Month = int, Day = int, iso = Rexx 'Y') public static binary returns int

  /*
   The following formula, which is for the Gregorian calendar only, may be more convenient for computer programming.
   Note that in some programming languages the remainder operation can yield a negative result if given a negative
   operand, so mod 7 may not translate to a simple remainder.

   W = (k + floor(2.6m - 0.2) - 2C + Y + floor(Y/4) + floor(C/4)) mod 7

   where floor() denotes the integer floor function,
   k is day (1 to 31)
   m is month (1 = March, ..., 10 = December, 11 = Jan, 12 = Feb) Treat Jan & Feb as months of the preceding year
   C is century (1987 has C = 19)
   Y is year (1987 has Y = 87 except Y = 86 for Jan & Feb)
   W is week day (0 = Sunday, ..., 6 = Saturday)
   */

  Year = Year - (Month < 3)
  k = double Day
  C = double Year % 100
  Y = double Year // 100
  m = double ((Month + 9) // 12) + 1
  --m = m - 2
  --m = m + (12 * (m < 0))

  --mf = Math.floor(2.6 * m - 0.2)
  --yf = Math.floor(Y / 4)
  --cf = Math.floor(C / 4)
  --c2 = 2 * C
  --W = DOWGauss.mod(int (k + mf - c2 + Y + yf + cf), 7)
  W = modulo(int (k + Math.floor(2.6 * m - 0.2) + y + Math.floor(y / 4) + Math.floor(c / 4) - 2 * c), 7)

  if 'YES'.abbrev(iso.upper, 1) then h = ((W + 6) // 7) + 1
                                else h = W

  return h

-- -----------------------------------------------------------------------------
/*
 * Mike Keith has given, as the shortest C Day-of-Week expression (45 characters) :-
 * (d+=m<3?y--:y-2,23*m/9+d+4+y/4-y/100+y/400)%7 // Sunday = 0
 */
method getDaynumKeith(y = int, m = int, d = int, iso = Rexx 'Y') public constant binary returns int

  if m < 3 then do
    d = d + y
    y = y - 1
    end
  else do
    d = d + y - 2
    end

  h = (23 * m % 9 + d + 4 + y % 4 - y % 100 + y % 400) // 7

  if 'YES'.abbrev(iso.upper, 1) then W = ((h + 6) // 7) + 1
                                else W = h

  return W

-- -----------------------------------------------------------------------------
method getDaynumBabwani(Year = int, Month = int, Day = int, iso = Rexx 'Y') public constant binary returns int
  -- return dow = Day of week: 0 = Saturday, 1 = Sunday, ... 6 = Friday

  y = Year
  m = Month
  d = Day

  dow    = int -- dow stands for day of week
  dowfg  = double
  fmonth = int
  leap   = int

  if ((y // 100 == 0) & (y // 400 \= 0)) then  -- leap function 1 for leap & 0 for non-leap
    leap = 0
  else if (y // 4 == 0) then
    leap = 1
  else
    leap = 0

  fmonth = 3 + (2 - leap) * ((m + 2) % (2 * m)) + (5 * m + m % 9) % 2 -- f(m) formula
  fmonth = fmonth // 7 -- f(m) is brought in range of 0 to 6

  century    = y % 100
  lastdigits = y // 100

  dowfg = 1.25 * lastdigits + fmonth + d - 2 * (century // 4) -- function of weekday for Gregorian
  dow = int dowfg // 7 -- remainder on division by 7

  if 'YES'.abbrev(iso.upper, 1) then W = ((dow + 5) // 7) + 1
                                else W = dow

  return W

-- -----------------------------------------------------------------------------
method modulo(N = int, D = int) inheritable static binary returns int
  return (D + (N // D)) // D

